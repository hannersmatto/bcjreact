import React, { Component } from "react";
import { Link } from "react-router-dom";

import Amplify, { API, graphqlOperation } from "aws-amplify";

import moment from "moment";

class AllResources extends Component {

    state = {
        busy: false,
    }

    static defaultProps = {
        resources: [],
        deleteResource: () => null,
    }

    async handleDeleteClick(resource, e) {
        e.preventDefault();

        if (window.confirm(`Are you sure you want to delete resource ${resource.id}`)) {
            const { deleteResource } = this.props;

            await deleteResource(resource);
        }
    }

    handleSync = async () => {
        const { client } = this.props;
        const query = ListResources;

        this.setState({ busy: true });

        await client.query({
            query,
            fetchPolicy: 'network-only',
        });

        this.setState({ busy: false });
    }

    renderResource = (resource) => (
        <Link to={`/resource/${resource.id}`} className="card" key={resource.id}>
            <div className="content">
                <div className="header">{resource.name}</div>
            </div>
            <div className="content">
                <p><i className="icon calendar"></i>{moment(resource.when).format('LL')}</p>
                <p><i className="icon clock"></i>{moment(resource.when).format('LT')}</p>
                <p><i className="icon marker"></i>{resource.where}</p>
            </div>
            <div className="content">
                <div className="description"><i className="icon info circle"></i>{resource.description}</div>
            </div>
            <div className="extra content">
                <i className="icon comment"></i> {resource.comments.items.length} comments
            </div>
            <button className="ui bottom attached button" onClick={this.handleDeleteClick.bind(this, resource)}>
                <i className="trash icon"></i>
                Delete
            </button>
        </Link>
    );

    render() {
        const { busy } = this.state;
        const { resources } = this.props;

        return (
            <div>
                <div className="ui clearing basic segment">
                    <h1 className="ui header left floated">All Resources</h1>
                    <button className="ui icon left basic button" onClick={this.handleSync} disabled={busy}>
                        <i aria-hidden="true" className={`refresh icon ${busy && "loading"}`}></i>
                        Sync with Server
                    </button>
                </div>
                <div className="ui link cards">
                    <div className="card blue">
                        <Link to="/newResource" className="new-resource content center aligned">
                            <i className="icon add massive"></i>
                            <p>Create new resource</p>
                        </Link>
                    </div>
                    {[].concat(resources).sort((a, b) => a.when.localeCompare(b.when)).map(this.renderResource)}
                </div>
            </div>
        );
    }

}

const ListResources = `query ListResources {
  listResources {
    items {
      id
      where
      description
    }
  }
}`;

const GetResource = `query GetResource($id: ID! $nextToken: String) {
    getResource(id: $id) {
        id
        name
        description
        comments(nextToken: $nextToken) {
            items {
                content
            }
        }
    }
}`;

// Simple query
const allResources = await API.graphql(graphqlOperation(ListResources));

// Query using a parameter
const oneResource = await API.graphql(graphqlOperation(GetResource, { id: 'some id' }));
console.log(oneResource);

export default withApollo(compose(
    graphql(
        QueryAllResources,
        {
            options: {
                fetchPolicy: 'cache-first',
            },
            props: ({ data: { listResources = { items: [] } } }) => ({
                resources: listResources.items
            })
        }
    ),
    graphql(
        MutationDeleteResource,
        {
            options: {
                update: (proxy, { data: { deleteResource } }) => {
                    const query = QueryAllResources;
                    const data = proxy.readQuery({ query });

                    data.listResources.items = data.listResources.items.filter(resource => resource.id !== deleteResource.id);

                    proxy.writeQuery({ query, data });
                }
            },
            props: (props) => ({
                deleteResource: (resource) => {
                    return props.mutate({
                        variables: { id: resource.id },
                        optimisticResponse: () => ({
                            deleteResource: {
                                ...resource, __typename: 'Resource', comments: { __typename: 'CommentConnection', items: [] }
                            }
                        }),
                    });
                }
            })
        }
    )
)(AllResources));
